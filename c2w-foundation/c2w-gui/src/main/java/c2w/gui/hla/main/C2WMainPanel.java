/*
 * Copyright (c) 2008, Institute for Software Integrated Systems, Vanderbilt University
 * All rights reserved.
 *
 * Permission to use, copy, modify, and distribute this software and its
 * documentation for any purpose, without fee, and without written agreement is
 * hereby granted, provided that the above copyright notice, the following
 * two paragraphs and the author appear in all copies of this software.
 *
 * IN NO EVENT SHALL THE VANDERBILT UNIVERSITY BE LIABLE TO ANY PARTY FOR
 * DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT
 * OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF THE VANDERBILT
 * UNIVERSITY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * THE VANDERBILT UNIVERSITY SPECIFICALLY DISCLAIMS ANY WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE.  THE SOFTWARE PROVIDED HEREUNDER IS
 * ON AN "AS IS" BASIS, AND THE VANDERBILT UNIVERSITY HAS NO OBLIGATION TO
 * PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.
 * 
 * @author Himanshu Neema
 */

package c2w.gui.hla.main;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.GridBagConstraints;
import java.awt.Toolkit;
import java.awt.datatransfer.StringSelection;
import java.awt.datatransfer.Transferable;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.File;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Handler;
import java.util.logging.LogRecord;
import java.util.logging.Logger;

import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTextArea;

import c2w.hla.FedMgr;
import c2w.hla.HighPrio;
import c2w.hla.LowPrio;
import c2w.hla.MediumPrio;
import c2w.hla.VeryLowPrio;
import c2w.hla.FedMgr.LOG_TYPE;
import c2w.util.MsgDisplay;
import c2w.util.XmlFileFilter;

/**
 * Main Panel for the Federation Manager.
 * 
 * @author Himanshu Neema
 */
public class C2WMainPanel extends javax.swing.JPanel implements PropertyChangeListener {
	
    private static final long serialVersionUID = 1L;

    private static FedMgr fedMgr;

    private static Logger log = Logger.getLogger(C2WSim.class.getName());

    private DecimalFormat defaultDecimalFormatter = new DecimalFormat("0.000");

    // TODO: Convert proxy start time to Fed Mgr params (use it, what proxy start time, and display format)
    private static final String PROXY_START_TIME = "2013-09-24 03:00:00 -0700";
    private static final Boolean USE_PROXY_START_TIME = false;
    private Date proxyStartTime = null;
    private SimpleDateFormat proxyStartTimeInitFormatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss Z");
    private SimpleDateFormat proxyStartTimeDisplayFormatter = new SimpleDateFormat("EEE, dd MMM yyyy  HH:mm:ss 'PDT'");

    public class JTextAreaHandler extends Handler {
        private JTextArea _jTextArea;

    	public JTextAreaHandler() { }
        public JTextAreaHandler(JTextArea jTextArea) {
            _jTextArea = jTextArea;
        }

        public void setJTextArea(JTextArea jTextArea) {
            _jTextArea = jTextArea;
        }

        public void publish(LogRecord logRecord) {
    		if ( _jTextArea != null ) _jTextArea.append( logRecord.getMessage() );
        }

    	public void flush() { }
    	public void close() { _jTextArea = null; }
    }

    /** Creates new form C2WMainPanel */
    public C2WMainPanel(
     String federationName, String fedFile, String scriptFile, String dbName, String logLevel, boolean realtimeMode, String lockFilename, double step, double lookahead, boolean terminateOnCOAFinish, double federationEndTime, long seed4Dur, boolean autoStart
    ) {
        initComponents();
        try {
        	proxyStartTime = proxyStartTimeInitFormatter.parse(PROXY_START_TIME);
        } catch (Exception e) {
        	proxyStartTime = new Date();
        }
        init( federationName, fedFile, scriptFile, dbName, logLevel, realtimeMode, lockFilename, step, lookahead, terminateOnCOAFinish, federationEndTime, seed4Dur, autoStart );
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        timeLabel = new javax.swing.JLabel();
        statusLabel = new javax.swing.JLabel();
        modeComboBox = new javax.swing.JComboBox();
        modeLabel = new javax.swing.JLabel();
        logLevelLabel = new javax.swing.JLabel();
        configureButton = new javax.swing.JButton();
        startButton = new javax.swing.JButton();
        pauseButton = new javax.swing.JButton();
        terminateButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        simLogText = new javax.swing.JTextArea();
        simLogLabel = new javax.swing.JLabel();
        logLevelComboBox = new javax.swing.JComboBox();
        clearLogButton = new javax.swing.JButton();
        copyLogButton = new javax.swing.JButton();

        setLayout(new java.awt.GridBagLayout());

        setPreferredSize(new java.awt.Dimension(600, 500));
        timeLabel.setText("Time: 0 ms");
        timeLabel.setName("timeLabel");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(15, 5, 15, 5);
        // timeLabel.setPreferredSize(new Dimension(50, 20));
        gridBagConstraints.fill = gridBagConstraints.VERTICAL;
        timeLabel.setFont(new Font("Tahoma", Font.BOLD, 24));
        timeLabel.setForeground(Color.RED);
        add(timeLabel, gridBagConstraints);

        statusLabel.setText("Status: running");
        statusLabel.setName("statusLabel");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(statusLabel, gridBagConstraints);

        modeComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        modeComboBox.setToolTipText("Select the simulation run mode");
        modeComboBox.setName("modeCombobox");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        gridBagConstraints.fill = gridBagConstraints.HORIZONTAL;
        add(modeComboBox, gridBagConstraints);

        modeLabel.setText("Mode:");
        modeLabel.setName("modeLabel");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(modeLabel, gridBagConstraints);

        logLevelLabel.setText("Log-level:");
        logLevelLabel.setName("logLevelLabel");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        gridBagConstraints.fill = gridBagConstraints.HORIZONTAL;
        add(logLevelLabel, gridBagConstraints);

        configureButton.setText("Configure...");
        configureButton.setToolTipText("Click to configure simulation");
        configureButton.setActionCommand("jButton1");
        configureButton.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        configureButton.setMaximumSize(new java.awt.Dimension(121, 23));
        configureButton.setMinimumSize(new java.awt.Dimension(121, 23));
        configureButton.setName("configureButton");
        configureButton.setPreferredSize(new java.awt.Dimension(121, 23));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(configureButton, gridBagConstraints);

        startButton.setText("Start");
        startButton.setToolTipText("Click to start/resume simulation");
        startButton.setMaximumSize(new java.awt.Dimension(121, 23));
        startButton.setMinimumSize(new java.awt.Dimension(121, 23));
        startButton.setName("startButton");
        startButton.setPreferredSize(new java.awt.Dimension(121, 23));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(startButton, gridBagConstraints);

        pauseButton.setText("Pause");
        pauseButton.setToolTipText("Click to pause a running simulation");
        pauseButton.setMaximumSize(new java.awt.Dimension(121, 23));
        pauseButton.setMinimumSize(new java.awt.Dimension(121, 23));
        pauseButton.setName("pauseButton");
        pauseButton.setPreferredSize(new java.awt.Dimension(121, 23));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(pauseButton, gridBagConstraints);

        terminateButton.setText("Terminate");
        terminateButton.setToolTipText("Click to terminate a running simulation");
        terminateButton.setMaximumSize(new java.awt.Dimension(121, 23));
        terminateButton.setMinimumSize(new java.awt.Dimension(121, 23));
        terminateButton.setName("terminateButton");
        terminateButton.setPreferredSize(new java.awt.Dimension(121, 23));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(terminateButton, gridBagConstraints);

        simLogText.setColumns(20);
        simLogText.setRows(5);
        simLogText.setName("logText");
        jScrollPane1.setViewportView(simLogText);

        log.addHandler(new JTextAreaHandler(simLogText));

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.gridheight = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(jScrollPane1, gridBagConstraints);

        simLogLabel.setText("Simulation log:");
        simLogLabel.setName("simLogLabel");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(simLogLabel, gridBagConstraints);

        logLevelComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        logLevelComboBox.setToolTipText("Select the simulation log level");
        logLevelComboBox.setName("logLevelCombobox");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(logLevelComboBox, gridBagConstraints);

        clearLogButton.setText("Clear log");
        clearLogButton.setMaximumSize(new java.awt.Dimension(121, 23));
        clearLogButton.setMinimumSize(new java.awt.Dimension(121, 23));
        clearLogButton.setPreferredSize(new java.awt.Dimension(121, 23));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(clearLogButton, gridBagConstraints);

        copyLogButton.setText("Copy log");
        copyLogButton.setMaximumSize(new java.awt.Dimension(121, 23));
        copyLogButton.setMinimumSize(new java.awt.Dimension(121, 23));
        copyLogButton.setPreferredSize(new java.awt.Dimension(121, 23));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(copyLogButton, gridBagConstraints);

    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton clearLogButton;

    private javax.swing.JButton configureButton;

    private javax.swing.JButton copyLogButton;

    private javax.swing.JScrollPane jScrollPane1;

    private javax.swing.JComboBox logLevelComboBox;

    private javax.swing.JLabel logLevelLabel;

    private javax.swing.JComboBox modeComboBox;

    private javax.swing.JLabel modeLabel;

    private javax.swing.JButton pauseButton;

    private javax.swing.JLabel simLogLabel;

    private javax.swing.JTextArea simLogText;

    private javax.swing.JButton startButton;

    private javax.swing.JLabel statusLabel;

    private javax.swing.JButton terminateButton;

    private javax.swing.JLabel timeLabel;

    // End of variables declaration//GEN-END:variables

    private void init(
     String federationName, String fedFile, String scriptFile, String dbName, String logLevel, boolean realtimeMode, String lockFilename, double step, double lookahead, boolean terminateOnCOAFinish, double federationEndTime, long seed4Dur, final boolean autoStart
    ) {

        // initialize labels, fields, and buttons
        startButton.setEnabled(true);
        pauseButton.setEnabled(false);
        terminateButton.setEnabled(false);

        updateSimTime(0);
        updateSimStatus(FedMgr.SIM_STATUS_STOPPED);

        simLogText.setEditable(false);

        modeComboBox.setModel(new javax.swing.DefaultComboBoxModel(
         new String[] {
          FedMgr.MODE_REALTIME,
          FedMgr.MODE_AS_FAST_AS_POSSIBLE
         }
        ) );
        modeComboBox.setSelectedItem( realtimeMode ? FedMgr.MODE_REALTIME : FedMgr.MODE_AS_FAST_AS_POSSIBLE );

        logLevelComboBox.setModel(new javax.swing.DefaultComboBoxModel(
         new String[] {
          FedMgr.LOG_LEVEL_NONE,
          FedMgr.LOG_LEVEL_HIGH,
          FedMgr.LOG_LEVEL_MEDIUM,
          FedMgr.LOG_LEVEL_LOW,
          FedMgr.LOG_LEVEL_ALL
         }
        ) );
        logLevelComboBox.setSelectedItem(FedMgr.LOG_LEVEL_HIGH);

        // Create Model federation manager class
        try {
            if (fedMgr == null) {
                fedMgr = new FedMgr( federationName, fedFile, scriptFile, dbName, logLevel, realtimeMode, lockFilename, step, lookahead, terminateOnCOAFinish, federationEndTime, seed4Dur, autoStart );
            }
        } catch (Exception e1) {
        	MsgDisplay.displayException(this, "Error during initialization", e1, "Could not create the Federation Manager", autoStart);
            System.exit(-1);
        }

        // Add all listeners
        fedMgr.addPropertyChangeListener(FedMgr.PROP_LOGICAL_TIME, this);
        fedMgr.addPropertyChangeListener(FedMgr.PROP_LOG_HIGH_PRIO, this);
        fedMgr.addPropertyChangeListener(FedMgr.PROP_LOG_MEDIUM_PRIO, this);
        fedMgr.addPropertyChangeListener(FedMgr.PROP_LOG_LOW_PRIO, this);
        fedMgr.addPropertyChangeListener(FedMgr.PROP_LOG_VERY_LOW_PRIO, this);
        fedMgr.addPropertyChangeListener(FedMgr.PROP_EXTERNAL_SIM_PAUSED, this);

        configureButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent arg0) {
                configureSimulation();
            }
        });
        startButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent arg0) {
                startSimulation(autoStart);
            }
        });
        pauseButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent arg0) {
                pauseSimulation(autoStart);
            }
        });
        terminateButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent arg0) {
                confirmYesNoBeforeExit();
            }
        });
        clearLogButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent arg0) {
                clearAllLogs();
            }
        });
        copyLogButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent arg0) {
                copyLogIntoClipboard();
            }
        });
        modeComboBox.addItemListener(new ItemListener() {
            public void itemStateChanged(ItemEvent itemEvent) {
                if (itemEvent.getStateChange() == ItemEvent.SELECTED) {
                    String selected = (String) itemEvent.getItem();
                    boolean realT = selected
                            .compareToIgnoreCase(FedMgr.MODE_REALTIME) == 0;
                    fedMgr.setRealtime(realT);
                }
            }
        });
        logLevelComboBox.addItemListener(new ItemListener() {
            public void itemStateChanged(ItemEvent itemEvent) {
                if (itemEvent.getStateChange() == ItemEvent.SELECTED) {
                    int selected = logLevelComboBox.getSelectedIndex();
                    try {
                        fedMgr.updateLogLevel(selected);
                    } catch (Exception e) {
                    	MsgDisplay.displayException(getParent(), "Error during initialization", e, "Could not update the log level", autoStart);
                    }
                }
            }
        });
    }

    private void updateSimTime(double time) {
    	if(USE_PROXY_START_TIME) {
	    	long numMillis = proxyStartTime.getTime() + ((long) time * 1000);
	    	Date curTime = new Date(numMillis);
	    	timeLabel.setText("Time: " + proxyStartTimeDisplayFormatter.format(curTime));
    	} else {
    		timeLabel.setText("Time: " + defaultDecimalFormatter.format(time) + " seconds");
    	}
    }

    private void updateSimStatus(String status) {
        statusLabel.setText("Status: " + status);
    }

    private void addLogMessage(
     LOG_TYPE logType, String fedName, double fedTime, String logMessage
    ) {
        String strFedTime = fedTime < 0 ? "Unknown" : defaultDecimalFormatter.format(fedTime);
        log.info(
         "Log priority: \"" + logType + "\" Federate: \"" + fedName +
         "\" Time: \"" + strFedTime + "\" Message: \"" + logMessage + "\"\n"
        );
    }

    public void configureSimulation() {
        JFileChooser chooser = new JFileChooser();
        XmlFileFilter filter = new XmlFileFilter();
        chooser.setDialogTitle( "Choose a C2Windtunnel configuration file to setup experiments" );
        chooser.setFileFilter(filter);
        // if (defaultFilename != null) {
        // chooser.setSelectedFile(new File(defaultFilename));
        // }

        int selection = chooser.showOpenDialog(this);
        if (selection == JFileChooser.APPROVE_OPTION) {
            File file = chooser.getSelectedFile();
            try {
                FedMgr.configureSimulation(file);
            } catch (Exception e) {
                System.out.println("Configuration of the simulation failed");
                e.printStackTrace();
            }
        }
    }

    public void startSimulation(boolean nonGUIMode) {
        try {
            if (fedMgr.isRunning()) {
                fedMgr.resumeSimulation();
            } else {
                fedMgr.startSimulation();
            }
            updateSimStatus(FedMgr.SIM_STATUS_RUNNING);
            startButton.setText("Resume");
            startButton.setEnabled(false);
            pauseButton.setEnabled(true);
            terminateButton.setEnabled(true);
        } catch (Exception e) {
        	MsgDisplay.displayException(this, "Error in Federation Manager", e, "Could not start simulation", nonGUIMode);
        }
    }

    private void pauseSimulation(boolean nonGUIMode) {
        try {
            fedMgr.pauseSimulation();
            updateSimStatus(FedMgr.SIM_STATUS_PAUSED);
            startButton.setEnabled(true);
            pauseButton.setEnabled(false);
            terminateButton.setEnabled(true);
        } catch (Exception e) {
        	MsgDisplay.displayException(this, "Error in Federation Manager", e, "Could not pause simulation", nonGUIMode);
        }
    }

//    public void terminateSimulation() {
//        try {
//            fedMgr.terminateSimulation();
//            updateSimStatus(FedMgr.SIM_STATUS_STOPPED);
//            startButton.setText("Start");
//            startButton.setEnabled(true);
//            pauseButton.setEnabled(false);
//            terminateButton.setEnabled(false);
//        } catch (Exception e) {
//            showException(e, "Error while terminating simulation");
//        }
//    }

    private void clearAllLogs() {
        simLogText.setText("");
    }

    private void copyLogIntoClipboard() {
        Transferable tss = new StringSelection(simLogText.getText());
        Toolkit.getDefaultToolkit().getSystemClipboard().setContents(tss, null);
    }

    /**
     * Confirm before exit
     */
    public void confirmYesNoBeforeExit() {
        log.info("C2WindTunnel Simulation tool confirming exit");
        
        int choice = JOptionPane.showConfirmDialog( this, "Exit Simulation?", "Confirm exit", JOptionPane.YES_NO_OPTION );

        if (choice == JOptionPane.YES_OPTION) {
        	
        	try {
				fedMgr.terminateSimulation();
				Thread.sleep(3000);
			} catch (Exception e) {
				e.printStackTrace();
			}
        	
            log.info("C2WindTunnel Simulation tool exiting");
            
            // In case some federate is still hanging around
            fedMgr.killEntireFederation();
        }
    }

    public void propertyChange(PropertyChangeEvent evt) {
        assert evt.getSource() instanceof FedMgr;
        if (FedMgr.PROP_LOGICAL_TIME.equals(evt.getPropertyName())) {
            assert evt.getNewValue() instanceof Double;
            updateSimTime(((Double) evt.getNewValue()));
        } else if (FedMgr.PROP_LOG_HIGH_PRIO.equals(evt.getPropertyName())) {
            assert evt.getNewValue() instanceof HighPrio;
            HighPrio hp = (HighPrio) evt.getNewValue();
            addLogMessage(LOG_TYPE.LOG_TYPE_HIGH, hp.get_FedName(), hp.get_Time(),
                    hp.get_Comment());
        } else if (FedMgr.PROP_LOG_MEDIUM_PRIO.equals(evt.getPropertyName())) {
            assert evt.getNewValue() instanceof MediumPrio;
            MediumPrio mp = (MediumPrio) evt.getNewValue();
            addLogMessage(LOG_TYPE.LOG_TYPE_MEDIUM, mp.get_FedName(), mp.get_Time(),
                    mp.get_Comment());
        } else if (FedMgr.PROP_LOG_LOW_PRIO.equals(evt.getPropertyName())) {
            assert evt.getNewValue() instanceof LowPrio;
            LowPrio lp = (LowPrio) evt.getNewValue();
            addLogMessage(LOG_TYPE.LOG_TYPE_LOW, lp.get_FedName(), lp.get_Time(),
                    lp.get_Comment());
        } else if (FedMgr.PROP_LOG_VERY_LOW_PRIO.equals(evt.getPropertyName())) {
            assert evt.getNewValue() instanceof VeryLowPrio;
            VeryLowPrio vlp = (VeryLowPrio) evt.getNewValue();
            addLogMessage(LOG_TYPE.LOG_TYPE_VERY_LOW, vlp.get_FedName(), vlp.get_Time(),
                    vlp.get_Comment());
        } else if (FedMgr.PROP_EXTERNAL_SIM_PAUSED
                .equals(evt.getPropertyName())) {
            assert evt.getNewValue() instanceof Boolean;
            updateSimStatus(FedMgr.SIM_STATUS_PAUSED);
            startButton.setEnabled(true);
            pauseButton.setEnabled(false);
            terminateButton.setEnabled(true);
        }
    }
}
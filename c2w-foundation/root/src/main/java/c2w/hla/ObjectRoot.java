

// This code has been generated by the C2W code generator.
// Do not edit manually!

/*
 * Copyright (c) 2016, Institute for Software Integrated Systems, Vanderbilt University
 * All rights reserved.
 *
 * Permission to use, copy, modify, and distribute this software and its
 * documentation for any purpose, without fee, and without written agreement is
 * hereby granted, provided that the above copyright notice, the following
 * two paragraphs and the author appear in all copies of this software.
 *
 * IN NO EVENT SHALL THE VANDERBILT UNIVERSITY BE LIABLE TO ANY PARTY FOR
 * DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT
 * OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF THE VANDERBILT
 * UNIVERSITY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * THE VANDERBILT UNIVERSITY SPECIFICALLY DISCLAIMS ANY WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE.  THE SOFTWARE PROVIDED HEREUNDER IS
 * ON AN "AS IS" BASIS, AND THE VANDERBILT UNIVERSITY HAS NO OBLIGATION TO
 * PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.
 *
 * @author Himanshu Neema
 * @author Harmon Nine
 */

package c2w.hla;

import hla.rti.*;
import hla.rti.jlc.RtiFactory;
import hla.rti.jlc.RtiFactoryFactory;

import java.lang.reflect.Method;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;


import org.portico.impl.hla13.types.DoubleTime;

/**
 * ObjectRoot is the base class for all objects
 * defined in a given federation.  As such, an ObjectRoot
 * variable may refer to any type of interaction defined in the
 * federation.
 * <p/>
 * This ObjectRoot class provides the following:
 * - methods for constructing any object in the federation, either from
 * data provided by the RTI (for example, see
 * {@link #create_object( int classHandle )} or from a string argument
 * specifying the name of object to construct (see
 * {@link #create_object( String className )}.
 * - methods for sending object updates to the RTI (see
 * {@link #updateAttributeValues( RTIambassador rti )} for an example).
 * - methods for publishing/subscribing to any object/object attribute 
 * defined in the federation (see
 * {@link #publish( String className, RTIambassador rti )} for example).
 * - methods for getting/setting any attribute in the object to
 * which a given ObjectRoot variable is referring
 * (see {@link #getAttribute( String datamemberName )} and
 * {@link #setAttribute( String datamemberName, Object value )}
 */
public class ObjectRoot implements ObjectRootInterface {

	private static int logId = 0;
	private static int _globalUniqueID = 0;
	
	private static int generateUniqueID() {
		return _globalUniqueID++;
	}
	
	private int _uniqueID;
	
	public int getUniqueID() { return _uniqueID; }
	
	protected static RtiFactory _factory;
	static {
		boolean factoryNotAcquired = true;
		while( factoryNotAcquired ) {
			try {
				_factory = RtiFactoryFactory.getRtiFactory( "org.portico.dlc.HLA13RTIFactory" );
				factoryNotAcquired = false;
			} catch ( Exception e ) {
				System.err.println( "ERROR: acquiring factory" );
				e.printStackTrace();
				try { Thread.sleep( 100 ); } catch ( Exception e1 ) { }
			}
		}
	}

	protected static Set< String > _classNameSet = new HashSet< String >();
	protected static Map< String, Class<?> > _classNameClassMap = new HashMap< String, Class<?> >();
	protected static Map<  String, Set< String >  > _datamemberClassNameSetMap = new HashMap<  String, Set< String >  >();
	protected static Map<  String, Set< String >  > _allDatamemberClassNameSetMap = new HashMap<  String, Set< String >  >();

	protected static Map< String, Integer > _classNameHandleMap = new HashMap< String, Integer >();
	protected static Map< Integer, String > _classHandleNameMap = new HashMap< Integer, String >();
	protected static Map< Integer, String > _classHandleSimpleNameMap = new HashMap< Integer, String >();
	
	protected static Map< String, Integer > _datamemberNameHandleMap = new HashMap< String, Integer >();
	protected static Map< Integer, String > _datamemberHandleNameMap = new HashMap< Integer, String >();
	protected static Map< String, String > _datamemberTypeMap = new HashMap< String, String >();


	protected static Map<  String, Set< String >  > _classNamePublishAttributeNameMap = new HashMap<  String, Set< String >  >();
	protected static Map<  String, Set< String >  > _classNameSubscribeAttributeNameMap = new HashMap<  String, Set< String >  >();

	protected static Map< String, AttributeHandleSet > _classNamePublishedAttributeMap = new HashMap< String, AttributeHandleSet >();
	protected static Map< String, AttributeHandleSet > _classNameSubscribedAttributeMap = new HashMap< String, AttributeHandleSet >();
	
    private static Map< Integer, ObjectRoot > _objectMap = new HashMap< Integer, ObjectRoot >();

	protected static class Attribute<T> {                                                                                 // NOMELD
		private T _value = null;                                                                                           // NOMELD
		private T _oldValue = null;                                                                                        // NOMELD
		private boolean _oldValueInit = false;                                                                             // NOMELD
		private double _time = 0;                                                                                          // NOMELD
                                                                                                                           // NOMELD
		public Attribute( T init ) {                                                                                       // NOMELD
			_value = init;                                                                                                 // NOMELD
		}                                                                                                                  // NOMELD
		                                                                                                                   // NOMELD
		public T getValue() { return _value; }                                                                             // NOMELD
		public void setValue( T value ) {                                                                                  // NOMELD
			if ( value == null ) return;                                                                                   // NOMELD
			_value = value;                                                                                                // NOMELD
		}                                                                                                                  // NOMELD
		                                                                                                                   // NOMELD
		public double getTime() { return _time; }                                                                          // NOMELD
		public void setTime( double time ) { _time = time; }                                                               // NOMELD
		                                                                                                                   // NOMELD
		public void setHasBeenUpdated() {                                                                                  // NOMELD
			_oldValue = _value;                                                                                            // NOMELD
			_oldValueInit = true;                                                                                          // NOMELD
		}                                                                                                                  // NOMELD
		                                                                                                                   // NOMELD
		public boolean shouldBeUpdated( boolean force ) { return force || !_oldValueInit || !_oldValue.equals( _value ); } // NOMELD		
	}                                                                                                                      // NOMELD
	
	
	
	
private static boolean _isInitialized = false;

private static int _handle;

/**
* Returns the handle (RTI assigned) of the ObjectRoot object class.
* Note: As this is a static method, it is NOT polymorphic, and so, if called on
* a reference will return the handle of the class pertaining to the reference,\
* rather than the handle of the class for the instance referred to by the reference.
* For the polymorphic version of this method, use {@link #getClassHandle()}.
*/
public static int get_handle() { return _handle; }

/**
* Returns the fully-qualified (dot-delimited) name of the ObjectRoot
* object class.
* Note: As this is a static method, it is NOT polymorphic, and so, if called on
* a reference will return the name of the class pertaining to the reference,\
* rather than the name of the class for the instance referred to by the reference.
* For the polymorphic version of this method, use {@link #getClassName()}.
*/
public static String get_class_name() { return "ObjectRoot"; }

/**
* Returns the simple name (the last name in the dot-delimited fully-qualified
* class name) of the ObjectRoot object class.
*/
public static String get_simple_class_name() { return "ObjectRoot"; }

private static Set< String > _datamemberNames = new HashSet< String >();
private static Set< String > _allDatamemberNames = new HashSet< String >();

/**
* Returns a set containing the names of all of the non-hidden attributes in the
* ObjectRoot object class.
* Note: As this is a static method, it is NOT polymorphic, and so, if called on
* a reference will return a set of parameter names pertaining to the reference,\
* rather than the parameter names of the class for the instance referred to by
* the reference.  For the polymorphic version of this method, use
* {@link #getAttributeNames()}.
*/
public static Set< String > get_attribute_names() {
	return new HashSet< String >( _datamemberNames );
}


/**
* Returns a set containing the names of all of the attributes in the
* ObjectRoot object class.
* Note: As this is a static method, it is NOT polymorphic, and so, if called on
* a reference will return a set of parameter names pertaining to the reference,\
* rather than the parameter names of the class for the instance referred to by
* the reference.  For the polymorphic version of this method, use
* {@link #getAttributeNames()}.
*/
public static Set< String > get_all_attribute_names() {
	return new HashSet< String >( _allDatamemberNames );
}



private static AttributeHandleSet _publishedAttributeHandleSet;
private static Set< String > _publishAttributeNameSet = new HashSet< String >();

private static AttributeHandleSet _subscribedAttributeHandleSet; 
private static Set< String > _subscribeAttributeNameSet = new HashSet< String >();



static {
	_classNameSet.add( "ObjectRoot" );
	_classNameClassMap.put( "ObjectRoot", ObjectRoot.class );
	
	_datamemberClassNameSetMap.put( "ObjectRoot", _datamemberNames );
	_allDatamemberClassNameSetMap.put( "ObjectRoot", _allDatamemberNames );

	
	
	
	
	
	


	_classNamePublishAttributeNameMap.put( "ObjectRoot", _publishAttributeNameSet );
	_publishedAttributeHandleSet = _factory.createAttributeHandleSet();
	_classNamePublishedAttributeMap.put( "ObjectRoot", _publishedAttributeHandleSet );

	_classNameSubscribeAttributeNameMap.put( "ObjectRoot", _subscribeAttributeNameSet );
	_subscribedAttributeHandleSet = _factory.createAttributeHandleSet();
	_classNameSubscribedAttributeMap.put( "ObjectRoot", _subscribedAttributeHandleSet );


}


private static String initErrorMessage = "Error:  ObjectRoot:  could not initialize:  ";
protected static void init( RTIambassador rti ) {
	if ( _isInitialized ) return;
	_isInitialized = true;
	
	
	
	boolean isNotInitialized = true;
	while( isNotInitialized ) {
		try {
			_handle = rti.getObjectClassHandle( "ObjectRoot" );
			isNotInitialized = false;
		} catch ( FederateNotExecutionMember f ) {
			System.err.println( initErrorMessage + "Federate Not Execution Member" );
			f.printStackTrace();
			return;				
		} catch ( NameNotFound n ) {
			System.err.println( initErrorMessage + "Name Not Found" );
			n.printStackTrace();
			return;				
		} catch ( Exception e ) {
			e.printStackTrace();
			try { Thread.sleep( 50 ); } catch( Exception e1 ) { }					
		}
	}

	_classNameHandleMap.put( "ObjectRoot", get_handle() );
	_classHandleNameMap.put( get_handle(), "ObjectRoot" );
	_classHandleSimpleNameMap.put( get_handle(), "ObjectRoot" );

	
}


private static boolean _isPublished = false;
private static String publishErrorMessage = "Error:  ObjectRoot:  could not publish:  ";

/**
* Publishes the ObjectRoot object class for a federate.
*
* @param rti handle to the RTI, usu. obtained through the
* {@link SynchronizedFederate#getRTI()} call
*/
public static void publish( RTIambassador rti ) {
	if ( _isPublished ) return;
	
	init( rti );

	
	_publishedAttributeHandleSet.empty();
	for( String attributeName : _publishAttributeNameSet ) {
		try {
			_publishedAttributeHandleSet.add(  _datamemberNameHandleMap.get( "ObjectRoot," + attributeName )  );
		} catch ( Exception e ) {
			System.err.println( publishErrorMessage + "Could not publish \"" + attributeName + "\" attribute." );
		}
	}


	synchronized( rti ) {
		boolean isNotPublished = true;
		while( isNotPublished ) {
			try {
				rti.publishObjectClass( get_handle(), _publishedAttributeHandleSet );
				isNotPublished = false;
			} catch ( FederateNotExecutionMember f ) {
				System.err.println( publishErrorMessage + "Federate Not Execution Member" );
				f.printStackTrace();
				return;
			} catch ( ObjectClassNotDefined i ) {
				System.err.println( publishErrorMessage + "Object Class Not Defined" );
				i.printStackTrace();
				return;
			} catch ( Exception e ) {
				e.printStackTrace();
				try { Thread.sleep( 50 ); } catch( Exception e1 ) { }
			}
		}
	}
	
	_isPublished = true;
}

private static String unpublishErrorMessage = "Error:  ObjectRoot:  could not unpublish:  ";
/**
* Unpublishes the ObjectRoot object class for a federate.
*
* @param rti handle to the RTI, usu. obtained through the
* {@link SynchronizedFederate#getRTI()} call
*/
public static void unpublish( RTIambassador rti ) {
	if ( !_isPublished ) return;
	
	init( rti );
	synchronized( rti ) {
		boolean isNotUnpublished = true;
		while( isNotUnpublished ) {
			try {
				rti.unpublishObjectClass( get_handle() );
				isNotUnpublished = false;
			} catch ( FederateNotExecutionMember f ) {
				System.err.println( unpublishErrorMessage + "Federate Not Execution Member" );
				f.printStackTrace();
				return;
			} catch ( ObjectClassNotDefined i ) {
				System.err.println( unpublishErrorMessage + "Object Class Not Defined" );
				i.printStackTrace();
				return;
			} catch ( ObjectClassNotPublished i ) {
				System.err.println( unpublishErrorMessage + "Object Class Not Published" );
				i.printStackTrace();
				return;
			} catch ( Exception e ) {
				e.printStackTrace();
				try { Thread.sleep( 50 ); } catch( Exception e1 ) { }
			}
		}
	}
	
	_isPublished = false;
}

private static boolean _isSubscribed = false;
private static String subscribeErrorMessage = "Error:  ObjectRoot:  could not subscribe:  ";
/**
* Subscribes a federate to the ObjectRoot object class.
*
* @param rti handle to the RTI, usu. obtained through the
* {@link SynchronizedFederate#getRTI()} call
*/
public static void subscribe( RTIambassador rti ) {
	if ( _isSubscribed ) return;
	
	init( rti );
	
	_subscribedAttributeHandleSet.empty();
	for( String attributeName : _subscribeAttributeNameSet ) {
		try {
			_subscribedAttributeHandleSet.add(  _datamemberNameHandleMap.get( "ObjectRoot," + attributeName )  );
		} catch ( Exception e ) {
			System.err.println( subscribeErrorMessage + "Could not subscribe to \"" + attributeName + "\" attribute." );
		}
	}

	
	synchronized( rti ) {
		boolean isNotSubscribed = true;
		while( isNotSubscribed ) {
			try {
				rti.subscribeObjectClassAttributes( get_handle(), _subscribedAttributeHandleSet );
				isNotSubscribed = false;
			} catch ( FederateNotExecutionMember f ) {
				System.err.println( subscribeErrorMessage + "Federate Not Execution Member" );
				f.printStackTrace();
				return;
			} catch ( ObjectClassNotDefined i ) {
				System.err.println( subscribeErrorMessage + "Object Class Not Defined" );
				i.printStackTrace();
				return;
			} catch ( Exception e ) {
				e.printStackTrace();
				try { Thread.sleep( 50 ); } catch( Exception e1 ) { }
			}
		}
	}
	
	_isSubscribed = true;
}

private static String unsubscribeErrorMessage = "Error:  ObjectRoot:  could not unsubscribe:  ";
/**
* Unsubscribes a federate from the ObjectRoot object class.
*
* @param rti handle to the RTI, usu. obtained through the
* {@link SynchronizedFederate#getRTI()} call
*/
public static void unsubscribe( RTIambassador rti ) {
	if ( !_isSubscribed ) return;

	init( rti );
	synchronized( rti ) {
		boolean isNotUnsubscribed = true;
		while( isNotUnsubscribed ) {
			try {
				rti.unsubscribeObjectClass( get_handle() );
				isNotUnsubscribed = false;
			} catch ( FederateNotExecutionMember f ) {
				System.err.println( unsubscribeErrorMessage + "Federate Not Execution Member" );
				f.printStackTrace();
				return;
			} catch ( ObjectClassNotDefined i ) {
				System.err.println( unsubscribeErrorMessage + "Object Class Not Defined" );
				i.printStackTrace();
				return;
			} catch ( ObjectClassNotSubscribed i ) {
				System.err.println( unsubscribeErrorMessage + "Object Class Not Subscribed" );
				i.printStackTrace();
				return;
			} catch ( Exception e ) {
				e.printStackTrace();
				try { Thread.sleep( 50 ); } catch( Exception e1 ) { }
			}
		}
	}
	
	_isSubscribed = false;
}

/**
* Return true if "handle" is equal to the handle (RTI assigned) of this class
* (that is, the ObjectRoot object class).
*
* @param handle handle to compare to the value of the handle (RTI assigned) of
* this class (the ObjectRoot object class).
* @return "true" if "handle" matches the value of the handle of this class
* (that is, the ObjectRoot object class).
*/
public static boolean match( int handle ) { return handle == get_handle(); }

/**
* Returns the handle (RTI assigned) of this instance's object class .
* 
* @return the handle (RTI assigned) if this instance's object class
*/
public int getClassHandle() { return get_handle(); }

/**
* Returns the fully-qualified (dot-delimited) name of this instance's object class.
* 
* @return the fully-qualified (dot-delimited) name of this instance's object class
*/
public String getClassName() { return get_class_name(); }

/**
* Returns the simple name (last name in its fully-qualified dot-delimited name)
* of this instance's object class.
* 
* @return the simple name of this instance's object class 
*/
public String getSimpleClassName() { return get_simple_class_name(); }

/**
* Returns a set containing the names of all of the non-hiddenattributes of an
* object class instance.
*
* @return set containing the names of all of the attributes of an
* object class instance
*/
public Set< String > getAttributeNames() { return get_attribute_names(); }

/**
* Returns a set containing the names of all of the attributes of an
* object class instance.
*
* @return set containing the names of all of the attributes of an
* object class instance
*/
public Set< String > getAllAttributeNames() { return get_all_attribute_names(); }

/**
* Publishes the object class of this instance of the class for a federate.
*
* @param rti handle to the RTI, usu. obtained through the
* {@link SynchronizedFederate#getRTI()} call
*/
public void publishObject( RTIambassador rti ) { publish( rti ); }

/**
* Unpublishes the object class of this instance of this class for a federate.
*
* @param rti handle to the RTI, usu. obtained through the
* {@link SynchronizedFederate#getRTI()} call
*/
public void unpublishObject( RTIambassador rti ) { unpublish( rti ); }

/**
* Subscribes a federate to the object class of this instance of this class.
*
* @param rti handle to the RTI, usu. obtained through the
* {@link SynchronizedFederate#getRTI()} call
*/
public void subscribeObject( RTIambassador rti ) { subscribe( rti ); }

/**
* Unsubscribes a federate from the object class of this instance of this class.
*
* @param rti handle to the RTI, usu. obtained through the
* {@link SynchronizedFederate#getRTI()} call
*/
public void unsubscribeObject( RTIambassador rti ) { unsubscribe( rti ); }


/**
* Returns a data structure containing the handles of all attributes for this object
* class that are currently marked for subscription.  To actually subscribe to these
* attributes, a federate must call <objectclassname>.subscribe( RTIambassador rti ).
*
* @return data structure containing the handles of all attributes for this object
* class that are currently marked for subscription
*/
public AttributeHandleSet getSubscribedAttributeHandleSet() { return _subscribedAttributeHandleSet; }


public String toString() {
	return "ObjectRoot("
		
		
		+ ")";
}
	/**
	* Returns a set of strings containing the names of all of the object
	* classes in the current federation.
	*
	* @return Set< String > containing the names of all object classes
	* in the current federation
	*/
	public static Set< String > get_object_names() { return new HashSet< String >( _classNameSet ); }

	/**
	* Returns a set of strings containing the names of all of the non-hidden attributes
	* in the object class specified by className.
	*
	* @param className name of object class for which to retrieve the
	* names of all of its attributes
	* @return Set< String > containing the names of all attributes in the
	* className object class
	*/
	public static Set< String > get_attribute_names( String className ) {
		return new HashSet< String >(  _datamemberClassNameSetMap.get( className )  );
	}
	
	/**
	* Returns a set of strings containing the names of all of the attributes
	* in the object class specified by className.
	*
	* @param className name of object class for which to retrieve the
	* names of all of its attributes
	* @return Set< String > containing the names of all attributes in the
	* className object class
	*/
	public static Set< String > get_all_attribute_names( String className ) {
		return new HashSet< String >(  _allDatamemberClassNameSetMap.get( className )  );
	}
	
	/**
	* Returns the fully-qualified name of the object class corresponding
	* to the RTI-defined classHandle.
	*
	* @param classHandle handle (defined by RTI) of object class for
	* which to retrieve the fully-qualified name
	* @return the fully-qualified name of the object class that
	* corresponds to the RTI-defined classHandle
	*/
	public static String get_class_name( int classHandle ) {
		return _classHandleNameMap.get( classHandle );
	}

	/**
	* Returns the simple name of the object class corresponding to the
	* RTI-defined classHandle.  The simple name of an object class is
	* the last name in its (dot-delimited) fully-qualified name.
	*
	* @param classHandle handle (defined by RTI) of object class for which
	* to retrieve the simple name
	* @return the simple name of the object class that corresponds to
	* the RTI-defined classHandle
	*/
	public static String get_simple_class_name( int classHandle ) {
		return _classHandleSimpleNameMap.get( classHandle );
	}
	
	/**
	* Returns the integer handle (RTI defined) of the object class
	* corresponding to the fully-qualified object class name in className.
	*
	* @param className fully-qualified name of object class for which to
	* retrieve the RTI-defined integer handle
	* @return the RTI-defined handle of the object class
	*/
	public static int get_handle( String className ) {
	
		Integer classHandle = _classNameHandleMap.get( className );
		if ( classHandle == null ) {
			System.err.println( "Bad class name \"" + className + "\" on get_handle." );
			return -1;
		}
		
		return classHandle;		
	}
	
	/**
	* Returns the name of an attribute corresponding to
	* its handle (RTI assigned) in datamemberHandle.
	*
	* @param datamemberHandle handle of attribute (RTI assigned)
	* for which to return the name
	* @return the name of the attribute corresponding to datamemberHandle
	*/
	public static String get_attribute_name( int datamemberHandle ) {
		return _datamemberHandleNameMap.get( datamemberHandle );
	}
	
	/**
	* Returns the handle of an attribute (RTI assigned) given
	* its object class name and attribute name
	*
	* @param className name of object class
	* @param datamemberName name of attribute
	* @return the handle (RTI assigned) of the attribute "datamemberName" of object class "className"
	*/
	public static int get_attribute_handle( String className, String datamemberName ) {
	
		Integer datamemberHandle = _datamemberNameHandleMap.get( className + "," + datamemberName );
		if ( datamemberHandle == null ) {
			System.err.println( "Bad attribute \"" + datamemberName + "\" for class \"" + className + "\" on get_attribute_handle." );
			return -1;
		}
		
		return datamemberHandle;		
	}
	
	private static Class<?>[] pubsubArguments = new Class<?>[] { RTIambassador.class };
	
	
	/**
	* Publishes the object class named by "className" for a federate.
	* This can also be performed by calling the publish( RTIambassador rti )
	* method directly on the object class named by "className" (for
	* example, to publish the ObjectRoot class in particular,
	* see {@link ObjectRoot#publish( RTIambassador rti )}).
	*
	* @param className name of object class to be published for the federate
	* @param rti handle to the RTI, usu. obtained through the
	* {@link SynchronizedFederate#getRTI()} call
	*/
	public static void publish( String className, RTIambassador rti ) {
		Class<?> rtiClass = _classNameClassMap.get( className );
		if ( rtiClass == null ) {
			System.err.println( "Bad class name \"" + className + "\" on publish." );
			return;
		}
		try {
			Method method = rtiClass.getMethod( "publish", pubsubArguments );
			method.invoke( null, new Object[]{ rti } );
		} catch ( Exception e ) {
			System.err.println( "Exception caught on publish!" );
			e.printStackTrace();
		}
	}

	/**
	* Unpublishes the object class named by "className" for a federate.
	* This can also be performed by calling the unpublish( RTIambassador rti )
	* method directly on the object class named by "className" (for
	* example, to unpublish the ObjectRoot class in particular,
	* see {@link ObjectRoot#unpublish( RTIambassador rti )}).
	*
	* @param className name of object class to be unpublished for the federate
	* @param rti handle to the RTI, usu. obtained through the
	* {@link SynchronizedFederate#getRTI()} call
	*/
	public static void unpublish( String className, RTIambassador rti ) {
		Class<?> rtiClass = _classNameClassMap.get( className );
		if ( rtiClass == null ) {
			System.err.println( "Bad class name \"" + className + "\" on unpublish." );
			return;
		}
		try {
			Method method = rtiClass.getMethod( "unpublish", pubsubArguments );
			method.invoke( null, new Object[]{ rti } );
		} catch ( Exception e ) {
			System.err.println( "Exception caught on unpublish!" );
			e.printStackTrace();
		}
	}
	
	/**
	* Subscribes federate to the object class names by "className"
	* This can also be performed by calling the subscribe( RTIambassador rti )
	* method directly on the object class named by "className" (for
	* example, to subscribe a federate to the ObjectRoot class
	* in particular, see {@link ObjectRoot#subscribe( RTIambassador rti )}).
	*
	* @param className name of object class to which to subscribe the federate
	* @param rti handle to the RTI, usu. obtained through the
	* {@link SynchronizedFederate#getRTI()} call
	*/
	public static void subscribe( String className, RTIambassador rti ) {
		Class<?> rtiClass = _classNameClassMap.get( className );
		if ( rtiClass == null ) {
			System.err.println( "Bad class name \"" + className + "\" on subscribe." );
			return;
		}
		try {
			Method method = rtiClass.getMethod( "subscribe", pubsubArguments );
			method.invoke( null, new Object[]{ rti } );
		} catch ( Exception e ) {
			System.err.println( "Exception caught on subscribe!" );
			e.printStackTrace();
		}
	}
	
	/**
	* Unsubscribes federate from the object class names by "className"
	* This can also be performed by calling the unsubscribe( RTIambassador rti )
	* method directly on the object class named by "className" (for
	* example, to unsubscribe a federate to the ObjectRoot class
	* in particular, see {@link ObjectRoot#unsubscribe( RTIambassador rti )}).
	*
	* @param className name of object class to which to unsubscribe the federate
	* @param rti handle to the RTI, usu. obtained through the
	* {@link SynchronizedFederate#getRTI()} call
	*/
	public static void unsubscribe( String className, RTIambassador rti ) {
		Class<?> rtiClass = _classNameClassMap.get( className );
		try {
			Method method = rtiClass.getMethod( "unsubscribe", pubsubArguments );
			method.invoke( null, new Object[]{ rti } );
		} catch ( Exception e ) {
			System.err.println( "Exception caught on unsubscribe!" );
			e.printStackTrace();
		}
	}


	/**
	* Publishes the attribute named by "attributeName" of the object class named
	* by "className" for a federate.  This can also be performed by calling the
	* publish_<attributeName>() method directly on the object class named by
	* "className".
	*
	* Note:  This method only marks the attribute named by "attributeName" for
	* publication.  The attribute doesn't actually get published until the
	* "className" object class, of which it is a member, is (re)published.  See
	* {@link ObjectRoot#publish( String className, RTIambassador RTI )} and
	* {@link ObjectRoot#publish( RTIambassador RTI )} for examples of how to
	* publish the object class.
	* 
	* @param className name of object class for which the attribute named by
	* "attributeName" is to be published
	* @param attributeName name of the attribute to be published
	*/
	public static void publish( String className, String attributeName ) {
		try {
			_classNamePublishAttributeNameMap.get( className ).add( attributeName );
		} catch ( Exception e ) {
			System.err.println( "ERROR:  ObjectRoot.publish:  could not publish class \"" + className + "\" \"" + attributeName + "\" attribute." );
			e.printStackTrace();
		}		
	}

	/**
	* Unpublishes the attribute named by "attributeName" of the object class named
	* by "className" for a federate.  This can also be performed by calling the
	* unpublish_<attributeName>() method directly on the object class named by
	* "className".
	*
	* Note:  This method only marks the attribute named by "attributeName" for
	* un-publication. The attribute doesn't actually get unpublished until the
	* "className" object class, of which it is a member, is (re)published.  See
	* {@link ObjectRoot#publish( String className, RTIambassador RTI )} and
	* {@link ObjectRoot#publish( RTIambassador RTI )} for examples of how to
	* publish the object class.
	* 
	* @param className name of object class for which the attribute named by
	* "attributeName" is to be unpublished (by a federate)
	* @param attributeName name of the attribute to be unpublished
	*/
	public static void unpublish( String className, String attributeName ) {
		try {
			_classNamePublishAttributeNameMap.get( className ).remove( attributeName );
		} catch ( Exception e ) {
			System.err.println( "ERROR:  ObjectRoot.unpublish:  could not unpublish class \"" + className + "\" \"" + attributeName + "\" attribute." );
			e.printStackTrace();
		}		
	}

	/**
	* Subscribe a federate to the attribute named by "attributeName" of the
	* object class named by "className".  This can also be performed by calling
	* the subscribe_<attributeName>() method directly on the object class named
	* by "className".
	*
	* Note:  This method only marks the attribute named by "attributeName" for
	* subscription.  The attribute doesn't actually get subscribed to until the
	* "className" object class, of which it is a member, is (re)subscribed to.
	* See {@link ObjectRoot#subscribe( String className, RTIambassador RTI )} and
	* {@link ObjectRoot#subscribe( RTIambassador RTI )} for examples of how to
	* subscribe to the object class.
	* 
	* @param className name of object class for which the attribute named by
	* "attributeName" is to be subcribed
	* @param attributeName name of the attribute to be published
	*/
	public static void subscribe( String className, String attributeName ) {
		try {
			_classNameSubscribeAttributeNameMap.get( className ).add( attributeName );
		} catch ( Exception e ) {
			System.err.println( "ERROR:  ObjectRoot.subscribe:  could not subscribe to class \"" + className + "\" \"" + attributeName + "\" attribute." );
			e.printStackTrace();
		}		
	}

	/**
	* Unsubscribe a federate from the attribute named by "attributeName" of the
	* object class named by "className".  This can also be performed by calling
	* the unsubscribe_<attributeName>() method directly on the object class named
	* by "className".
	*
	* Note:  This method only marks the attribute named by "attributeName" for
	* unsubscription.  The attribute doesn't actually get unsubscribed from until the
	* "className" object class, of which it is a member, is (re)subscribed to.
	* See {@link ObjectRoot#subscribe( String className, RTIambassador RTI )} and
	* {@link ObjectRoot#subscribe( RTIambassador RTI )} for examples of how to
	* subscribe to the object class.
	* 
	* @param className name of object class for which the attribute named by
	* "attributeName" is to be subcribed
	* @param attributeName name of the attribute to be published
	*/
	public static void unsubscribe( String className, String attributeName ) {
		try {
			_classNameSubscribeAttributeNameMap.get( className ).remove( attributeName );
		} catch ( Exception e ) {
			System.err.println( "ERROR:  ObjectRoot.unsubscribe:  could not unsubscribe class \"" + className + "\" \"" + attributeName + "\" attribute." );
			e.printStackTrace();
		}		
	}

	
	private static ObjectRoot create_object( Class<?> rtiClass ) {
		ObjectRoot classRoot = null;
		try {
			classRoot = (ObjectRoot)rtiClass.newInstance();
		} catch( Exception e ) {
			System.err.println( "ERROR:  ObjectRoot:  create_object:  could not create/cast new Object" );
			e.printStackTrace();
		}
		
		return classRoot;
	}

	private static ObjectRoot create_object( Class<?> rtiClass, LogicalTime logicalTime ) {	
		ObjectRoot classRoot = create_object( rtiClass );
		if ( classRoot != null ) classRoot.setTime( logicalTime );
		return classRoot;
	}

	private static ObjectRoot create_object( Class<?> rtiClass, ReflectedAttributes datamemberMap ) {
		ObjectRoot classRoot = create_object( rtiClass );
		classRoot.setAttributes( datamemberMap );
		return classRoot;
	}
	
	private static ObjectRoot create_object( Class<?> rtiClass, ReflectedAttributes datamemberMap, LogicalTime logicalTime ) {
		ObjectRoot classRoot = create_object( rtiClass );
		classRoot.setAttributes( datamemberMap );
		classRoot.setTime( logicalTime );
		return classRoot;
	}
	
	/**
	* Create an object that is in instance of object class
	* "className". An ObjectRoot reference is returned,
	* so to refer to the instance using a reference to a "className" interaction,
	* the returned reference must be cast down the object inheritance
	* hierarchy.
	* An instance of the "className" object class may also be created
	* by using the "new" operator directory on the "className" object
	* class.  For instance, two ways to create an ObjectRoot
	* instance are
	* Object.create_object( "ObjectRoot" ),
	* and
	* new ObjectRoot()
	*
	* @param className fully-qualified (dot-delimited) name of the object
	* class for which to create an instance
	* @return instance of "className" object class
	*/
	public static ObjectRoot create_object( String className ) {
		Class<?> rtiClass = _classNameClassMap.get( className );
		if ( rtiClass == null ) return null;

		return create_object( rtiClass );
	}

	/**
	* Like {@link #create_object( String className )}, but object
	* is created with a timestamp based on "logicalTime".
	*
	* @param className fully-qualified (dot-delimited) name of the object
	* class for which to create an instance
	* @param logicalTime timestamp to place on the new object class instance
	* @return instance of "className" object class with "logicalTime" time stamp.
	*/
	public static ObjectRoot create_object( String className, LogicalTime logicalTime ) {
		Class<?> rtiClass = _classNameClassMap.get( className );
		if ( rtiClass == null ) return null;

		return create_object( rtiClass, logicalTime );
	}

	/**
	* Create an object that is in instance of object class
	* that corresponds to the "classHandle" handle (RTI assigned). An
	* ObjectRoot reference is returned, so to refer to the
	* instance using a reference to a "className" interaction, the returned
	* reference must be cast down the object inheritance hierarchy.
	*
	* @param classHandle handle of object class (RTI assigned) class for
	* which to create an instance
	* @return instance of object class corresponding to "classHandle"
	*/
	public static ObjectRoot create_object( int classHandle ) {
		Class<?> rtiClass = _classNameClassMap.get(  _classHandleNameMap.get( classHandle )  );
		if ( rtiClass == null ) return null;

		return create_object( rtiClass );
	}

	/**
	* Like {@link #create_object( int classHandle )}, but the object
	* is created with a timestamp based on "logicalTime".
	*
	* @param classHandle handle of object class (RTI assigned) class for
	* which to create an instance
	* @param logicalTime timestamp to place on the new object class instance
	* @return instance of object class corresponding to "classHandle" with
	* "logicalTime" time stamp
	*/
	public static ObjectRoot create_object( int classHandle, LogicalTime logicalTime ) {
		Class<?> rtiClass = _classNameClassMap.get(  _classHandleNameMap.get( classHandle )  );
		if ( rtiClass == null ) return null;

		return create_object( rtiClass, logicalTime );
	}

	/**
	* Like {@link #create_object( int classHandle )}, but the object's
	* attributes are initialized using "datamemberMap".  The "datamemberMap"
	* is usually acquired as an argument to an RTI callback method of a federate.
	*
	* @param classHandle handle of object class (RTI assigned) class for
	* which to create an instance
	* @param datamemberMap contains initializing values for the attributes
	* of the object class instance
	* @return instance of object class corresponding to "classHandle" with
	* its attributes initialized with the "datamemberMap"
	*/
	public static ObjectRoot create_object( int classHandle, ReflectedAttributes datamemberMap ) {
		Class<?> rtiClass = _classNameClassMap.get(  _classHandleNameMap.get( classHandle )  );
		if ( rtiClass == null ) return null;

		return create_object( rtiClass, datamemberMap );
	}

	/**
	* Like {@link #create_object( int classHandle, ReflectedAttributes datamemberMap )},
	* but the object is given a timestamp based on "logicalTime".
	*
	* @param classHandle handle of object class (RTI assigned) class for
	* which to create an instance
	* @param datamemberMap initializing values for the attributes of the
	* object class instance
	* @param logicalTime timestamp to place on the new object class instance
	* @return instance of object class corresponding to "classHandle" with
	* its attributes initialized with the "datamemberMap" and with
	* "logicalTime" timestamp
	*/
	public static ObjectRoot create_object( int classHandle, ReflectedAttributes datamemberMap, LogicalTime logicalTime ) {
		Class<?> rtiClass = _classNameClassMap.get(  _classHandleNameMap.get( classHandle )  );
		if ( rtiClass == null ) return null;

		return create_object( rtiClass, datamemberMap, logicalTime );
	}


	/**
	* Creates a new instance of the object class corresponding to "class_handle",
	* registers it in an map internal to the ObjectRoot class using "object_handle"
	* as a key, and returns a reference to the instance.  Though the created
	* instance is of the object class corresponding to "class_handle" (which is
	* a handle assigned by the RTI), it is referred to, via the return value, by
	* an ObjectRoot reference.  Thus, to refer to it as an instance of the object
	* class corresponding to "class_handle", the ObjectRoot reference needs to be
	* cast down through the inheritance hierarchy.
	* <p/>
	* class_handle and object_handle are usually acquired as arguments of the
	* "discoverObjectInstance" RTI callback method of a federate.
	*
	* @param class_handle handle of object class (RTI assigned) for which to create
	* an instance
	* @param object_handle handle (also RTI assigned) of this instance as it is
	* known to the RTI.  Any updates to the instance attributes provided by the
	* RTI (via a "reflectAttributeValues" federate callback) will be identified
	* with this object_handle.
	* @return new instance of the object class corresponding to class_handle
	*/
    public static ObjectRoot discover( int class_handle, int object_handle ) {
        Class<?> hlaObjectClass = _classNameClassMap.get(  _classHandleNameMap.get( class_handle )  );
        ObjectRoot objectRoot = null;
        try {
            objectRoot = (ObjectRoot)hlaObjectClass.newInstance();
            objectRoot.setObjectHandle( object_handle );
            _objectMap.put( object_handle, objectRoot );
        } catch( Exception e ) {
            System.err.println( "ERROR:  ObjectRoot:  discover:  could not discover object" );
            e.printStackTrace();
        }
        return objectRoot;
    }
    
    /**
    * Retrieves the object instance corresponding to "object_handle" from an
    * internal table in the ObjectRoot class, updates its attribute values using
    * "reflectedAttributes", and returns the instance.  Both "object_handle" and
    * "reflectedAttributes" are usually acquired as arguments of the
    * "reflectAttributeValues" RTI callback of a federate.
    * The return value is an ObjectRoot reference to the instance.  So, to refer
    * to the instance as an instance of its actual class, this reference will
    * have to be cast down the inheritance hierarchy.
    *
    * @param object_handle handle (RTI assigned) of object instance for which the
    * attributes are to be updated.
    * @param reflectedAttributes set of updated values for the attributes of the
    * object instance corresponding to object_handle.
    * @return the object instance with updated attribute values
    */
    public static ObjectRoot reflect( int object_handle, ReflectedAttributes reflectedAttributes ) {
    	ObjectRoot objectRoot = _objectMap.get( object_handle );
    	if ( objectRoot == null ) return null;
    	objectRoot.setTime( -1 );
    	objectRoot.setAttributes( reflectedAttributes );
    	return objectRoot;
    }

	/**
	* Like {@link #reflect( int object_handle, ReflectedAttributes reflectedAttributes )},
	* except the updated attributes of the object instance have their timestamps
	* updated to "logicalTime".
	*
    * @param object_handle handle (RTI assigned) of object instance for which the
    * attributes are to be updated.
    * @param reflectedAttributes set of updated values for the attributes of the
    * object instance corresponding to object_handle.
    * @param logicalTime new time stamp for attributes that are updated
    * @return the object instance with updated attribute values
    */
    public static ObjectRoot reflect( int object_handle, ReflectedAttributes reflectedAttributes, LogicalTime logicalTime ) {
    	ObjectRoot objectRoot = _objectMap.get( object_handle );
    	if ( objectRoot == null ) return null;
    	objectRoot.setTime( logicalTime );
    	objectRoot.setAttributes( reflectedAttributes );
    	return objectRoot;
    }

	/**
	* Like {@link #reflect( int object_handle, ReflectedAttributes reflectedAttributes )},
	* except the updated attributes of the object instance have their timestamps
	* updated to "time".
	*
    * @param object_handle handle (RTI assigned) of object instance for which the
    * attributes are to be updated.
    * @param reflectedAttributes set of updated values for the attributes of the
    * object instance corresponding to object_handle.
    * @param time new time stamp for attributes that are updated
    * @return the object instance with updated attribute values
    */
    public static ObjectRoot reflect( int object_handle, ReflectedAttributes reflectedAttributes, double time ) {
    	ObjectRoot objectRoot = _objectMap.get( object_handle );
    	if ( objectRoot == null ) return null;
    	objectRoot.setTime( time );
    	objectRoot.setAttributes( reflectedAttributes );
    	return objectRoot;
    }

	/**
	* Requests an attribute update for this object instance from the federate that
	* has modification rights on these attributes.
	*
	* @param rti handle to the RTI, usu. obtained through the
	* {@link SynchronizedFederate#getRTI()} call
	*/
	public void requestUpdate( RTIambassador rti ) {
		boolean requestNotSubmitted = true;
		while( requestNotSubmitted ) {
			try {		
				rti.requestObjectAttributeValueUpdate( getObjectHandle(), getSubscribedAttributeHandleSet() );
				requestNotSubmitted = false;
			} catch ( FederateNotExecutionMember f ) {
				System.err.println( "ERROR: " + getClassName() + "request for update failed:  Federate Not Execution Member" );
				f.printStackTrace();
				return;				
			} catch ( ObjectNotKnown o ) {
				System.err.println( "ERROR: " + getClassName() + "request for update failed:  Object Not Known" );
				o.printStackTrace();
				return;				
			} catch ( AttributeNotDefined a ) {
				System.err.println( "ERROR: " + getClassName() + "request for update failed:  Name Not Found" );
				a.printStackTrace();
				return;				
			} catch ( Exception e ) {
				e.printStackTrace();
				try { Thread.sleep( 50 ); } catch( Exception e1 ) { }					
			}
		}
	}

	/**
	* Returns the object instance corresponding to the "object_handle" (RTI
	* assigned) from a map internal to the ObjectRoot class.
	* The object instance is referred to, via the return value, using an
	* an ObjectRoot reference.  To reference to it using a reference of its
	* actual class, the returned reference must be cast down through the
	* inhertance hierarchy.
	*
	* @param object_handle handle (RTI assigned) of object instance to retrieve
	* from the map internal to the ObjectRoot class.
	* @return object instance corresponding to the object_handle (RTI assigned)
	* in the map that is internal to the ObjectRoot class.
	*/
	public static ObjectRoot getObject( int object_handle ) {
		return _objectMap.get( object_handle );
	}
	
	
	/**
	* Returns the object instance corresponding to the "object_handle" (RTI
	* assigned) from a map internal to the ObjectRoot class AND REMOVES IT
	* FROM THIS MAP.
	* The object instance is referred to, via the return value, using an
	* an ObjectRoot reference.  To reference to it using a reference of its
	* actual class, the returned reference must be cast down through the
	* inhertance hierarchy.
	*
	* @param object_handle handle (RTI assigned) of object instance to retrieve
	* from the map internal to the ObjectRoot class.
	* @return object instance corresponding to the object_handle (RTI assigned)
	* in the map that is internal to the ObjectRoot class.
	*/
    public static ObjectRoot removeObject( int object_handle ) {
        return _objectMap.remove( object_handle );
    }
    

    private int _object_handle;

    private void setObjectHandle( int object_handle ) {
        _objectMap.remove( object_handle );
        _object_handle = object_handle;
        _objectMap.put( object_handle, this );
    }

	/**
	* Returns the handle (RTI assigned) the corresponds to this object class
	* instance.  This handle is the instance's unique identifier to the RTI.
	*
	* @return the handle (RTI assigned) of this object class instance.
	*/
    public int getObjectHandle() { return _object_handle; }
	


	private double _time = -1;
	
	/**
	* Returns the timestamp for this object.  "receive order" objects
	* should have a timestamp of -1.
	*
	* @return timestamp for this object
	*/
	public double getTime() { return _time; }
	
	/**
	* Sets the timestamp of this object to "time".
	*
	* @param time new timestamp for this object
	*/
	public void setTime( double time ) { _time = time; }

	/**
	* Sets the timestamp of this object to "logicalTime".
	*
	* @param logicalTime new timestamp for this object
	*/
	public void setTime( LogicalTime logicalTime ) {
		DoubleTime doubleTime = new DoubleTime();
		doubleTime.setTo( logicalTime );
		setTime( doubleTime.getTime() );
	}


	/**
	* Creates a new ObjectRoot instance.
	*/
	public ObjectRoot() {
		_uniqueID = generateUniqueID();
	}
	
	/**
	* Creates a copy of an ObjectRoot instance.  As an
	* ObjectRoot instance contains no attributes,
	* this has the same effect as the default constructor.
	*/
	public ObjectRoot( ObjectRoot objectRoot ) {
		this();
	}

	protected ObjectRoot( ReflectedAttributes datamemberMap, boolean initFlag ) {
		this();
		if ( initFlag ) setAttributes( datamemberMap );
	}
	
	protected ObjectRoot( ReflectedAttributes datamemberMap, LogicalTime logicalTime, boolean initFlag ) {
		this();
		setTime( logicalTime );
		if ( initFlag ) setAttributes( datamemberMap );
	}


	/**
	* Creates a new object instance and initializes its attributes
	* using the "datamemberMap" -- this constructor is usually called as a
	* super-class constructor to create and initialize an instance of an
	* object further down in the inheritance hierarchy.  "datamemberMap"
	* is usually acquired as an argument to an RTI federate callback method, such
	* as "receiveInteraction".
	*
	* @param datamemberMap contains attribute values for the newly created
	* object
	*/
	public ObjectRoot( ReflectedAttributes datamemberMap ) {
		this( datamemberMap, true );
	}

	/**
	* Like {@link #ObjectRoot( ReflectedAttributes datamemberMap )},
	* except the new instance has an initial timestamp of "logicalTime".
	*
	* @param datamemberMap contains attribute values for the newly created
	* object
	* @param logicalTime initial timestamp for newly created object instance
	*/	
	public ObjectRoot( ReflectedAttributes datamemberMap, LogicalTime logicalTime ) {
		this( datamemberMap, logicalTime, true );
	}

	/**
	* Returns the value of the attribute named "datamemberName" for this
	* object.
	*
	* @param datamemberName name of attribute whose value to retrieve
	* @return the value of the attribute whose name is "datamemberName"
	*/
	public Object getAttribute( String datamemberName ) {
		return null;
	}

	/**
	* Returns the value of the attribute whose handle is "datamemberHandle"
	* (RTI assigned) for this object.
	*
	* @param datamemberHandle handle (RTI assigned) of attribute whose
	* value to retrieve
	* @return the value of the attribute whose handle is "datamemberHandle"
	*/
	public Object getAttribute( int datamemberHandle ) {
		return null;
	}
		
	/**
	* Set the values of the attributes in this object using
	* "datamemberMap".  "datamemberMap" is usually acquired as an argument to
	* an RTI federate callback method such as "receiveInteraction".
	*
	* @param datamemberMap  contains new values for the attributes of
	* this object
	*/
	public void setAttributes( ReflectedAttributes datamemberMap ) {
		int size = datamemberMap.size();
		for( int ix = 0 ; ix < size ; ++ix ) {
			try {
				setAttribute(  datamemberMap.getAttributeHandle( ix ), datamemberMap.getValue( ix )  );
			} catch ( Exception e ) {
				System.err.println( "setAttributes: Exception caught!" );
				e.printStackTrace();
			}
		}
	}

	private void setAttribute( int handle, byte[] val ) {
		if ( val == null ) {
			System.err.println( "set:  Attempt to set null value in class \"" + getClass().getName() + "\"" );
		}
		if (   !setAttributeAux(  handle, new String( val )  )   ) {
			System.err.println( "set:  bad attribute handle in class \"" + getClass().getName() + "\"" );
		}
	}
	
	/**
	* Sets the value of the attribute named "datamemberName" to "value"
	* in this object.  "value" is converted to data type of "datamemberName"
	* if needed.
	* This action can also be affected by calling the set_<datamemberName>( value )
	* method on the object using a reference to the object's actual
	* class.
	*
	* @param datamemberName name of attribute whose value is to be set
	* to "value"
	* @param value new value of attribute called "datamemberName"
	*/
	public void setAttribute( String datamemberName, String value ) {
		if (  !setAttributeAux( datamemberName, value )  ) {
			System.err.println( "Error:  objectRoot:  invalid attribute \"" + datamemberName + "\"" );
		}
	}

	/**
	* Sets the value of the attribute named "datamemberName" to "value"
	* in this object.  "value" should have the same data type as that of
	* the "datamemberName" attribute.
	* This action can also be affected by calling the set_<datamemberName>( value )
	* method on the object using a reference to the object's actual
	* class.
	*
	* @param datamemberName name of attribute whose value is to be set
	* to "value"
	* @param value new value of attribute called "datamemberName"
	*/
	public void setAttribute( String datamemberName, Object value ) {
		if (  !setAttributeAux( datamemberName, value )  ) {
			System.err.println( "Error:  objectRoot:  invalid attribute \"" + datamemberName + "\"" );
		}
	}

	protected boolean setAttributeAux( int param_handle, String val ) {
		return false;
	}

	protected boolean setAttributeAux( String datamemberName, String value ) {
		return false;
	}

	protected boolean setAttributeAux( String datamemberName, Object value ) {
		return false;
	}

	protected SuppliedAttributes createSuppliedDatamembers(boolean force) {
		return _factory.createSuppliedAttributes();
	}
	

    private boolean _isRegistered = false;

	/**
	* Registers this object with the RTI.  This method is usually called by a
	* federate who "owns" this object, i.e. the federate that created it and
	* has write-privileges to its attributes (so, it is responsible for updating
	* these attribute and conveying their updated values to the RTI).
	*
	* @param rti handle to the RTI, usu. obtained through the
	* {@link SynchronizedFederate#getRTI()} call
	*/ 
    public void registerObject( RTIambassador rti ) {
        
        while( !_isRegistered ) {
            try {
                synchronized( rti ) {
                    _object_handle = rti.registerObjectInstance( getClassHandle() );
                }
                _isRegistered = true;
                _objectMap.put( getObjectHandle(), this );
                
            } catch ( ObjectClassNotDefined o ) {
                o.printStackTrace();
                return;
            } catch ( ObjectClassNotPublished o ) {
                o.printStackTrace();
                return;
            } catch ( FederateNotExecutionMember f ) {
                f.printStackTrace();
                return;
            } catch ( Exception e ) {
                try {
                    Thread.sleep( 500 );
                } catch ( InterruptedException e1 ) {
                    e1.printStackTrace();
                } 
            }
        }

    }
    
	/**
	* Unregisters this object with the RTI.  The RTI will destroy all information
	* it contains regarding this object as a result.  This method is usually
	* called by a federate who "owns" this object, i.e. the federate that created
	* it and has write-privileges to its attributes.
	*
	* @param rti handle to the RTI, usu. obtained through the
	* {@link SynchronizedFederate#getRTI()} call
	*/ 
    public void unregisterObject( RTIambassador rti ) {
        
        while( _isRegistered ) {
            try {
                synchronized( rti ) {
                    rti.deleteObjectInstance( _object_handle, null );
                }
                _isRegistered = false;
                _objectMap.remove( getObjectHandle() );
                
            } catch ( ObjectNotKnown o ) {
                o.printStackTrace();
                return;
            } catch ( DeletePrivilegeNotHeld d ) {
                d.printStackTrace();
                return;
            } catch ( FederateNotExecutionMember f ) {
                f.printStackTrace();
                return;
            } catch ( Exception e ) {
                try {
                    Thread.sleep( 500 );
                } catch ( InterruptedException e1 ) {
                    e1.printStackTrace();
                } 
            }
        }
    }

	/**
	* Broadcasts the attributes of this object and their values to the RTI, where
	* the values have "time" as their timestamp.  This call should be used for
	* objects whose attributes have "timestamp" ordering.
	*
	* @param rti handle to the RTI, usu. obtained through the
	* {@link SynchronizedFederate#getRTI()} call
	* @param time timestamp on attribute values of this object
	* @param force if "false", only the attributes whose values have changed since
	* the last call to "updateAttributeValues" will be broadcast to the RTI.  If
	* "true", all attributes and their values are broadcast to the RTI.
	*/
    public void updateAttributeValues( RTIambassador rti, double time, boolean force ) {

        SuppliedAttributes suppliedAttributes = createSuppliedDatamembers( force );
        if ( suppliedAttributes.size() == 0 ) return;

        synchronized( rti ) {
            try {
                rti.updateAttributeValues(  getObjectHandle(), suppliedAttributes, null, new DoubleTime( time )  );
                createLog(suppliedAttributes, time);
            } catch ( ObjectNotKnown o ) {
                System.err.println( "ERROR:  " + getClass().getName() + ":  could not update attributes:  Object Not Known" );
                o.printStackTrace();
                return;
            } catch ( FederateNotExecutionMember f ) {
                System.err.println( "ERROR:  " + getClass().getName() + ":  could not update attributes:  Federate Not Execution Member" );
                f.printStackTrace();
                return;
            } catch ( AttributeNotDefined a ) {
                System.err.println( "ERROR:  " + getClass().getName() + ":  could not update attributes:  Attribute Not Defined" );
                a.printStackTrace();
                return;
            } catch ( AttributeNotOwned a ) {
                System.err.println( "ERROR:  " + getClass().getName() + ":  could not update attributes:  Attribute Not Owned" );
                a.printStackTrace();
                return;
            } catch ( ConcurrentAccessAttempted c ) {
                System.err.println( "ERROR:  " + getClass().getName() + ":  could not update attributes:  Concurrent Access Attempted" );
                c.printStackTrace();
                return;
            } catch ( InvalidFederationTime i ) {
                System.err.println( "ERROR:  " + getClass().getName() + ":  could not update attributes:  Invalid Federation Time" );
                i.printStackTrace();
                return;
            } catch ( Exception e ) {
                System.err.println( "ERROR:  " + getClass().getName() + ":  could not update attributes" );
                e.printStackTrace();
            }
        }
    }

	/**
    * Like {@link #updateAttributeValues( RTIambassador rti, double time, boolean force )},
    * except "force" is always false.
	*
	* @param rti handle to the RTI, usu. obtained through the
	* {@link SynchronizedFederate#getRTI()} call
	* @param time timestamp on attribute values of this object
	*/
    public void updateAttributeValues( RTIambassador rti, double time ) {
    	updateAttributeValues( rti, time, false );
    }

	/**
	* Broadcasts the attributes of this object and their values to the RTI (with
	* no timestamp).  This call should be used for objects whose attributes have
	* "receive" ordering.
	*
	* @param rti handle to the RTI, usu. obtained through the
	* {@link SynchronizedFederate#getRTI()} call
	* @param force if "false", only the attributes whose values have changed since
	* the last call to "updateAttributeValues" will be broadcast to the RTI.  If
	* "true", all attributes and their values are broadcast to the RTI.
	*/
    public void updateAttributeValues( RTIambassador rti, boolean force ) {

        SuppliedAttributes suppliedAttributes = createSuppliedDatamembers( force );
        if ( suppliedAttributes.size() == 0 ) return;

        synchronized( rti ) {
            try {
                rti.updateAttributeValues( getObjectHandle(), suppliedAttributes, null );
                createLog(suppliedAttributes, 0);
            } catch ( ObjectNotKnown o ) {
                System.err.println( "ERROR:  " + getClass().getName() + ":  could not update attributes:  Object Not Known" );
                o.printStackTrace();
                return;
            } catch ( FederateNotExecutionMember f ) {
                System.err.println( "ERROR:  " + getClass().getName() + ":  could not update attributes:  Federate Not Execution Member" );
                f.printStackTrace();
                return;
            } catch ( AttributeNotDefined a ) {
                System.err.println( "ERROR:  " + getClass().getName() + ":  could not update attributes:  Attribute Not Defined" );
                a.printStackTrace();
                return;
            } catch ( AttributeNotOwned a ) {
                System.err.println( "ERROR:  " + getClass().getName() + ":  could not update attributes:  Attribute Not Owned" );
                a.printStackTrace();
                return;
            } catch ( ConcurrentAccessAttempted c ) {
                System.err.println( "ERROR:  " + getClass().getName() + ":  could not update attributes:  Concurrent Access Attempted" );
                c.printStackTrace();
                return;
            } catch ( Exception e ) {
                System.err.println( "ERROR:  " + getClass().getName() + ":  could not update attributes" );
                e.printStackTrace();
            }
        }
    }

	/**
    * Like {@link #updateAttributeValues( RTIambassador rti, boolean force )},
    * except "force" is always false.
	*
	* @param rti handle to the RTI, usu. obtained through the
	* {@link SynchronizedFederate#getRTI()} call
	*/
	public void updateAttributeValues( RTIambassador rti ) {
		updateAttributeValues( rti, false );
	}

	protected static String _fedName = null;
	protected static Map< String, String > _pubAttributeLogMap = new HashMap< String, String >();
	protected static Map< String, String > _subAttributeLogMap = new HashMap< String, String >();
	
	public static void enablePublishLog(String object, String attribute, String fed, String thislevel, String globallevel){
		if(globallevel == null || "".equals(globallevel)) return;
		if(C2WLogger.getLogLevel(thislevel)> C2WLogger.getLogLevel(globallevel)) return;
		_fedName = fed;
		_pubAttributeLogMap.put(attribute, thislevel);
		C2WLogger.addLog(object, attribute, fed, true);
	}
	
	public static void enableSubscribeLog(String object, String attribute, String fed, String thislevel, String globallevel){
		if(globallevel == null || "".equals(globallevel)) return;
		if(C2WLogger.getLogLevel(thislevel)> C2WLogger.getLogLevel(globallevel)) return;
		_fedName = fed;
		_subAttributeLogMap.put(attribute, thislevel);
		C2WLogger.addLog(object, attribute, fed, true);
	}
	
	protected void createLog(final SuppliedAttributes suppliedAttributes, final double time) {
		if(_pubAttributeLogMap.isEmpty()) return;
        Thread t = new Thread(new Runnable() {                                                       // NOMELD
            public void run() {                                                                      // NOMELD
				try {
					String eventName = _fedName+"_pub_"+getSimpleClassName();

					// First just record the interaction event as a log
					C2WLogger.addEventLog(time, eventName);

					// Now, log detailed simulation data of the object update
					String logIdLocal = null;
					synchronized( ObjectRoot.class ) {
						logIdLocal = Integer.toString( logId++ );
					}
					for(int ix =0; ix < suppliedAttributes.size();ix++){							
						String attribute = get_attribute_name(suppliedAttributes.getHandle( ix ) );			
						if(!_pubAttributeLogMap.containsKey(attribute)) continue;
						String id = _fedName+"_pub_"+getSimpleClassName()+"_"+attribute;
						String value = new String(suppliedAttributes.getValue(ix));	
						String type = new String(_datamemberTypeMap.get(attribute));
						String loglevel = _pubAttributeLogMap.get(attribute);
						C2WLogger.addLog( id, time, attribute, value, type, loglevel, logIdLocal );				
					}
				} catch ( Exception e ) {
					System.err.println( "ERROR:  " + getClass().getName() + ":  could not send interaction" );
					e.printStackTrace();
				}
            }
        });
        t.start();
	}
	


	/**
	* For use with the melding API -- this method is used to cast
	* ObjectRoot instance reference into the
	* ObjectRootInterface interface.
	*
	* @param rootInstance ObjectRoot instance reference to be
	* cast into the ObjectRootInterface interface
	* @return ObjectRootInterface reference to the instance
	*/
	public ObjectRootInterface cast( ObjectRoot rootInstance ) {
		return rootInstance;
	}		

	/**
	* For use with the melding API -- this method creates a new
	* ObjectRoot instance and returns a
	* ObjectRootInterface reference to it.
	*
	* @return ObjectRootInterface reference to a newly created
	* ObjectRoot instance
	*/
	public ObjectRootInterface create() {
		return new ObjectRoot();
	}		

	public void copyFrom( Object object ) { }
}

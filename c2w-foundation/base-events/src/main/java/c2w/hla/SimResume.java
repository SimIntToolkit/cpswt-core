
// This code has been generated by the C2W code generator.
// Do not edit manually!

package c2w.hla;

import java.util.HashSet;
import java.util.Set;

import hla.rti.*;

/**
* The SimResume class implements the SimResume interaction in the
* c2w.hla simulation.
*/
public class SimResume extends SimulationControl {

	/**
	* Default constructor -- creates an instance of the SimResume interaction
	* class with default parameter values.
	*/
	public SimResume() { }

	
	
	private static int _sourceFed_handle;
	private static int _originFed_handle;
	
	
	/**
	* Returns the handle (RTI assigned) of the "sourceFed" parameter of
	* its containing interaction class.
	*
	* @return the handle (RTI assigned) of the "sourceFed" parameter
	*/
	public static int get_sourceFed_handle() { return _sourceFed_handle; }
	
	/**
	* Returns the handle (RTI assigned) of the "originFed" parameter of
	* its containing interaction class.
	*
	* @return the handle (RTI assigned) of the "originFed" parameter
	*/
	public static int get_originFed_handle() { return _originFed_handle; }
	
	
	
private static boolean _isInitialized = false;

private static int _handle;

/**
* Returns the handle (RTI assigned) of the SimResume interaction class.
* Note: As this is a static method, it is NOT polymorphic, and so, if called on
* a reference will return the handle of the class pertaining to the reference,\
* rather than the handle of the class for the instance referred to by the reference.
* For the polymorphic version of this method, use {@link #getClassHandle()}.
*/
public static int get_handle() { return _handle; }

/**
* Returns the fully-qualified (dot-delimited) name of the SimResume
* interaction class.
* Note: As this is a static method, it is NOT polymorphic, and so, if called on
* a reference will return the name of the class pertaining to the reference,\
* rather than the name of the class for the instance referred to by the reference.
* For the polymorphic version of this method, use {@link #getClassName()}.
*/
public static String get_class_name() { return "InteractionRoot.C2WInteractionRoot.SimulationControl.SimResume"; }

/**
* Returns the simple name (the last name in the dot-delimited fully-qualified
* class name) of the SimResume interaction class.
*/
public static String get_simple_class_name() { return "SimResume"; }

private static Set< String > _datamemberNames = new HashSet< String >();
private static Set< String > _allDatamemberNames = new HashSet< String >();

/**
* Returns a set containing the names of all of the non-hidden parameters in the
* SimResume interaction class.
* Note: As this is a static method, it is NOT polymorphic, and so, if called on
* a reference will return a set of parameter names pertaining to the reference,\
* rather than the parameter names of the class for the instance referred to by
* the reference.  For the polymorphic version of this method, use
* {@link #getParameterNames()}.
*/
public static Set< String > get_parameter_names() {
	return new HashSet< String >( _datamemberNames );
}


/**
* Returns a set containing the names of all of the parameters in the
* SimResume interaction class.
* Note: As this is a static method, it is NOT polymorphic, and so, if called on
* a reference will return a set of parameter names pertaining to the reference,\
* rather than the parameter names of the class for the instance referred to by
* the reference.  For the polymorphic version of this method, use
* {@link #getParameterNames()}.
*/
public static Set< String > get_all_parameter_names() {
	return new HashSet< String >( _allDatamemberNames );
}




static {
	_classNameSet.add( "InteractionRoot.C2WInteractionRoot.SimulationControl.SimResume" );
	_classNameClassMap.put( "InteractionRoot.C2WInteractionRoot.SimulationControl.SimResume", SimResume.class );
	
	_datamemberClassNameSetMap.put( "InteractionRoot.C2WInteractionRoot.SimulationControl.SimResume", _datamemberNames );
	_allDatamemberClassNameSetMap.put( "InteractionRoot.C2WInteractionRoot.SimulationControl.SimResume", _allDatamemberNames );

	
	
	_datamemberNames.add( "sourceFed" );
	_datamemberNames.add( "originFed" );
	
	
	_allDatamemberNames.add( "sourceFed" );
	_allDatamemberNames.add( "originFed" );
	
	
	_datamemberTypeMap.put( "sourceFed", "String" );
	_datamemberTypeMap.put( "originFed", "String" );



}


private static String initErrorMessage = "Error:  InteractionRoot.C2WInteractionRoot.SimulationControl.SimResume:  could not initialize:  ";
protected static void init( RTIambassador rti ) {
	if ( _isInitialized ) return;
	_isInitialized = true;
	
	SimulationControl.init( rti );
	
	boolean isNotInitialized = true;
	while( isNotInitialized ) {
		try {
			_handle = rti.getInteractionClassHandle( "InteractionRoot.C2WInteractionRoot.SimulationControl.SimResume" );
			isNotInitialized = false;
		} catch ( FederateNotExecutionMember f ) {
			System.err.println( initErrorMessage + "Federate Not Execution Member" );
			f.printStackTrace();
			return;				
		} catch ( NameNotFound n ) {
			System.err.println( initErrorMessage + "Name Not Found" );
			n.printStackTrace();
			return;				
		} catch ( Exception e ) {
			e.printStackTrace();
			try { Thread.sleep( 50 ); } catch( Exception e1 ) { }					
		}
	}

	_classNameHandleMap.put( "InteractionRoot.C2WInteractionRoot.SimulationControl.SimResume", get_handle() );
	_classHandleNameMap.put( get_handle(), "InteractionRoot.C2WInteractionRoot.SimulationControl.SimResume" );
	_classHandleSimpleNameMap.put( get_handle(), "SimResume" );

	
	isNotInitialized = true;
	while( isNotInitialized ) {
		try {
						
			_sourceFed_handle = rti.getParameterHandle( "sourceFed", get_handle() );			
			_originFed_handle = rti.getParameterHandle( "originFed", get_handle() );
			isNotInitialized = false;
		} catch ( FederateNotExecutionMember f ) {
			System.err.println( initErrorMessage + "Federate Not Execution Member" );
			f.printStackTrace();
			return;				
		} catch ( InteractionClassNotDefined i ) {
			System.err.println( initErrorMessage + "Interaction Class Not Defined" );
			i.printStackTrace();
			return;				
		} catch ( NameNotFound n ) {
			System.err.println( initErrorMessage + "Name Not Found" );
			n.printStackTrace();
			return;				
		} catch ( Exception e ) {
			e.printStackTrace();
			try { Thread.sleep( 50 ); } catch( Exception e1 ) { }					
		}
	}
		
		
	_datamemberNameHandleMap.put( "InteractionRoot.C2WInteractionRoot.SimulationControl.SimResume,sourceFed", get_sourceFed_handle() );
	_datamemberNameHandleMap.put( "InteractionRoot.C2WInteractionRoot.SimulationControl.SimResume,originFed", get_originFed_handle() );
		
		
	_datamemberHandleNameMap.put( get_sourceFed_handle(), "sourceFed" );
	_datamemberHandleNameMap.put( get_originFed_handle(), "originFed" );
	
}


private static boolean _isPublished = false;
private static String publishErrorMessage = "Error:  InteractionRoot.C2WInteractionRoot.SimulationControl.SimResume:  could not publish:  ";

/**
* Publishes the SimResume interaction class for a federate.
*
* @param rti handle to the RTI, usu. obtained through the
* {@link SynchronizedFederate#getRTI()} call
*/
public static void publish( RTIambassador rti ) {
	if ( _isPublished ) return;
	
	init( rti );



	synchronized( rti ) {
		boolean isNotPublished = true;
		while( isNotPublished ) {
			try {
				rti.publishInteractionClass( get_handle() );
				isNotPublished = false;
			} catch ( FederateNotExecutionMember f ) {
				System.err.println( publishErrorMessage + "Federate Not Execution Member" );
				f.printStackTrace();
				return;
			} catch ( InteractionClassNotDefined i ) {
				System.err.println( publishErrorMessage + "Interaction Class Not Defined" );
				i.printStackTrace();
				return;
			} catch ( Exception e ) {
				e.printStackTrace();
				try { Thread.sleep( 50 ); } catch( Exception e1 ) { }
			}
		}
	}
	
	_isPublished = true;
}

private static String unpublishErrorMessage = "Error:  InteractionRoot.C2WInteractionRoot.SimulationControl.SimResume:  could not unpublish:  ";
/**
* Unpublishes the SimResume interaction class for a federate.
*
* @param rti handle to the RTI, usu. obtained through the
* {@link SynchronizedFederate#getRTI()} call
*/
public static void unpublish( RTIambassador rti ) {
	if ( !_isPublished ) return;
	
	init( rti );
	synchronized( rti ) {
		boolean isNotUnpublished = true;
		while( isNotUnpublished ) {
			try {
				rti.unpublishInteractionClass( get_handle() );
				isNotUnpublished = false;
			} catch ( FederateNotExecutionMember f ) {
				System.err.println( unpublishErrorMessage + "Federate Not Execution Member" );
				f.printStackTrace();
				return;
			} catch ( InteractionClassNotDefined i ) {
				System.err.println( unpublishErrorMessage + "Interaction Class Not Defined" );
				i.printStackTrace();
				return;
			} catch ( InteractionClassNotPublished i ) {
				System.err.println( unpublishErrorMessage + "Interaction Class Not Published" );
				i.printStackTrace();
				return;
			} catch ( Exception e ) {
				e.printStackTrace();
				try { Thread.sleep( 50 ); } catch( Exception e1 ) { }
			}
		}
	}
	
	_isPublished = false;
}

private static boolean _isSubscribed = false;
private static String subscribeErrorMessage = "Error:  InteractionRoot.C2WInteractionRoot.SimulationControl.SimResume:  could not subscribe:  ";
/**
* Subscribes a federate to the SimResume interaction class.
*
* @param rti handle to the RTI, usu. obtained through the
* {@link SynchronizedFederate#getRTI()} call
*/
public static void subscribe( RTIambassador rti ) {
	if ( _isSubscribed ) return;
	
	init( rti );

	
	synchronized( rti ) {
		boolean isNotSubscribed = true;
		while( isNotSubscribed ) {
			try {
				rti.subscribeInteractionClass( get_handle() );
				isNotSubscribed = false;
			} catch ( FederateNotExecutionMember f ) {
				System.err.println( subscribeErrorMessage + "Federate Not Execution Member" );
				f.printStackTrace();
				return;
			} catch ( InteractionClassNotDefined i ) {
				System.err.println( subscribeErrorMessage + "Interaction Class Not Defined" );
				i.printStackTrace();
				return;
			} catch ( Exception e ) {
				e.printStackTrace();
				try { Thread.sleep( 50 ); } catch( Exception e1 ) { }
			}
		}
	}
	
	_isSubscribed = true;
}

private static String unsubscribeErrorMessage = "Error:  InteractionRoot.C2WInteractionRoot.SimulationControl.SimResume:  could not unsubscribe:  ";
/**
* Unsubscribes a federate from the SimResume interaction class.
*
* @param rti handle to the RTI, usu. obtained through the
* {@link SynchronizedFederate#getRTI()} call
*/
public static void unsubscribe( RTIambassador rti ) {
	if ( !_isSubscribed ) return;

	init( rti );
	synchronized( rti ) {
		boolean isNotUnsubscribed = true;
		while( isNotUnsubscribed ) {
			try {
				rti.unsubscribeInteractionClass( get_handle() );
				isNotUnsubscribed = false;
			} catch ( FederateNotExecutionMember f ) {
				System.err.println( unsubscribeErrorMessage + "Federate Not Execution Member" );
				f.printStackTrace();
				return;
			} catch ( InteractionClassNotDefined i ) {
				System.err.println( unsubscribeErrorMessage + "Interaction Class Not Defined" );
				i.printStackTrace();
				return;
			} catch ( InteractionClassNotSubscribed i ) {
				System.err.println( unsubscribeErrorMessage + "Interaction Class Not Subscribed" );
				i.printStackTrace();
				return;
			} catch ( Exception e ) {
				e.printStackTrace();
				try { Thread.sleep( 50 ); } catch( Exception e1 ) { }
			}
		}
	}
	
	_isSubscribed = false;
}

/**
* Return true if "handle" is equal to the handle (RTI assigned) of this class
* (that is, the SimResume interaction class).
*
* @param handle handle to compare to the value of the handle (RTI assigned) of
* this class (the SimResume interaction class).
* @return "true" if "handle" matches the value of the handle of this class
* (that is, the SimResume interaction class).
*/
public static boolean match( int handle ) { return handle == get_handle(); }

/**
* Returns the handle (RTI assigned) of this instance's interaction class .
* 
* @return the handle (RTI assigned) if this instance's interaction class
*/
public int getClassHandle() { return get_handle(); }

/**
* Returns the fully-qualified (dot-delimited) name of this instance's interaction class.
* 
* @return the fully-qualified (dot-delimited) name of this instance's interaction class
*/
public String getClassName() { return get_class_name(); }

/**
* Returns the simple name (last name in its fully-qualified dot-delimited name)
* of this instance's interaction class.
* 
* @return the simple name of this instance's interaction class 
*/
public String getSimpleClassName() { return get_simple_class_name(); }

/**
* Returns a set containing the names of all of the non-hiddenparameters of an
* interaction class instance.
*
* @return set containing the names of all of the parameters of an
* interaction class instance
*/
public Set< String > getParameterNames() { return get_parameter_names(); }

/**
* Returns a set containing the names of all of the parameters of an
* interaction class instance.
*
* @return set containing the names of all of the parameters of an
* interaction class instance
*/
public Set< String > getAllParameterNames() { return get_all_parameter_names(); }

/**
* Publishes the interaction class of this instance of the class for a federate.
*
* @param rti handle to the RTI, usu. obtained through the
* {@link SynchronizedFederate#getRTI()} call
*/
public void publishInteraction( RTIambassador rti ) { publish( rti ); }

/**
* Unpublishes the interaction class of this instance of this class for a federate.
*
* @param rti handle to the RTI, usu. obtained through the
* {@link SynchronizedFederate#getRTI()} call
*/
public void unpublishInteraction( RTIambassador rti ) { unpublish( rti ); }

/**
* Subscribes a federate to the interaction class of this instance of this class.
*
* @param rti handle to the RTI, usu. obtained through the
* {@link SynchronizedFederate#getRTI()} call
*/
public void subscribeInteraction( RTIambassador rti ) { subscribe( rti ); }

/**
* Unsubscribes a federate from the interaction class of this instance of this class.
*
* @param rti handle to the RTI, usu. obtained through the
* {@link SynchronizedFederate#getRTI()} call
*/
public void unsubscribeInteraction( RTIambassador rti ) { unsubscribe( rti ); }



public String toString() {
	return "SimResume("
		
		
		+ "sourceFed:" + get_sourceFed()
		+ "," + "originFed:" + get_originFed()
		+ ")";
}
	



	
	
	private String _sourceFed = "";
	
	private String _originFed = "";

	
	
	/**
	* Set the value of the "sourceFed" parameter to "value" for this parameter.
	*
	* @param value the new value for the "sourceFed" parameter
	*/
	public void set_sourceFed( String value ) { _sourceFed = value; }
	
	/**
	* Returns the value of the "sourceFed" parameter of this interaction.
	*
	* @return the value of the "sourceFed" parameter
	*/
	public String get_sourceFed() { return _sourceFed; }
	
	
	/**
	* Set the value of the "originFed" parameter to "value" for this parameter.
	*
	* @param value the new value for the "originFed" parameter
	*/
	public void set_originFed( String value ) { _originFed = value; }
	
	/**
	* Returns the value of the "originFed" parameter of this interaction.
	*
	* @return the value of the "originFed" parameter
	*/
	public String get_originFed() { return _originFed; }
	


	protected SimResume( ReceivedInteraction datamemberMap, boolean initFlag ) {
		super( datamemberMap, false );
		if ( initFlag ) setParameters( datamemberMap );
	}
	
	protected SimResume( ReceivedInteraction datamemberMap, LogicalTime logicalTime, boolean initFlag ) {
		super( datamemberMap, logicalTime, false );
		if ( initFlag ) setParameters( datamemberMap );
	}


	/**
	* Creates an instance of the SimResume interaction class, using
	* "datamemberMap" to initialize its parameter values.
	* "datamemberMap" is usually acquired as an argument to an RTI federate
	* callback method, such as "receiveInteraction".
	*
	* @param datamemberMap data structure containing initial values for the
	* parameters of this new SimResume interaction class instance
	*/
	public SimResume( ReceivedInteraction datamemberMap ) {
		this( datamemberMap, true );
	}
	
	/**
	* Like {@link #SimResume( ReceivedInteraction datamemberMap )}, except this
	* new SimResume interaction class instance is given a timestamp of
	* "logicalTime".
	*
	* @param datamemberMap data structure containing initial values for the
	* parameters of this new SimResume interaction class instance
	* @param logicalTime timestamp for this new SimResume interaction class
	* instance
	*/
	public SimResume( ReceivedInteraction datamemberMap, LogicalTime logicalTime ) {
		this( datamemberMap, logicalTime, true );
	}

	/**
	* Creates a new SimResume interaction class instance that is a duplicate
	* of the instance referred to by SimResume_var.
	*
	* @param SimResume_var SimResume interaction class instance of which
	* this newly created SimResume interaction class instance will be a
	* duplicate
	*/
	public SimResume( SimResume SimResume_var ) {
		super( SimResume_var );
		
		
		set_sourceFed( SimResume_var.get_sourceFed() );
		set_originFed( SimResume_var.get_originFed() );
	}


	/**
	* Returns the value of the parameter whose name is "datamemberName"
	* for this interaction.
	*
	* @param datamemberName name of parameter whose value is to be
	* returned
	* @return value of the parameter whose name is "datamemberName"
	* for this interaction
	*/
	public Object getParameter( String datamemberName ) {
		
		
		
		if (  "sourceFed".equals( datamemberName )  ) return get_sourceFed();
		else if (  "originFed".equals( datamemberName )  ) return get_originFed();
		else return super.getParameter( datamemberName );
	}
	
	/**
	* Returns the value of the parameter whose handle (RTI assigned)
	* is "datamemberHandle" for this interaction.
	*
	* @param datamemberHandle handle (RTI assigned) of parameter whose
	* value is to be returned
	* @return value of the parameter whose handle (RTI assigned) is
	* "datamemberHandle" for this interaction
	*/
	public Object getParameter( int datamemberHandle ) {
		
				
		
		if ( get_sourceFed_handle() == datamemberHandle ) return get_sourceFed();
		else if ( get_originFed_handle() == datamemberHandle ) return get_originFed();
		else return super.getParameter( datamemberHandle );
	}
	
	protected boolean setParameterAux( int param_handle, String val ) {
		boolean retval = true;		
		
			
		
		if ( param_handle == get_sourceFed_handle() ) set_sourceFed( val );
		else if ( param_handle == get_originFed_handle() ) set_originFed( val );
		else retval = super.setParameterAux( param_handle, val );
		
		return retval;
	}
	
	protected boolean setParameterAux( String datamemberName, String val ) {
		boolean retval = true;
		
			
		
		if (  "sourceFed".equals( datamemberName )  ) set_sourceFed( val );
		else if (  "originFed".equals( datamemberName )  ) set_originFed( val );	
		else retval = super.setParameterAux( datamemberName, val );
		
		return retval;
	}
	
	protected boolean setParameterAux( String datamemberName, Object val ) {
		boolean retval = true;
		
		
		
		if (  "sourceFed".equals( datamemberName )  ) set_sourceFed( (String)val );
		else if (  "originFed".equals( datamemberName )  ) set_originFed( (String)val );		
		else retval = super.setParameterAux( datamemberName, val );
		
		return retval;
	}

	protected SuppliedParameters createSuppliedDatamembers() {
		SuppliedParameters datamembers = super.createSuppliedDatamembers();

	
		
		
			datamembers.add( get_sourceFed_handle(), get_sourceFed().getBytes() );
		
			datamembers.add( get_originFed_handle(), get_originFed().getBytes() );
		
	
		return datamembers;
	}

	
	public void copyFrom( Object object ) {
		super.copyFrom( object );
		if ( object instanceof SimResume ) {
			SimResume data = (SimResume)object;
			
			
				_sourceFed = data._sourceFed;
				_originFed = data._originFed;
			
		}
	}
}
